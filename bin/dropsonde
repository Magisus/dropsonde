#!/usr/bin/env ruby
require 'gli'
require 'dropsonde'
require 'puppet'

class Dropsonde
  extend GLI::App

  Puppet.initialize_settings

  program_desc 'A simple telemetry tool for Puppet infrastructures'
  config_file '/etc/puppetlabs/telemetry.yaml'

  desc 'Verbose logging'
  switch [:verbose, :v]

  desc 'Auto update the Forge module name cache if expired'
  switch [:update], :default_value => true

  desc 'Path to cache directory'
  flag [:cachepath], :default_value => "#{Puppet.settings[:vardir]}/dropsonde"

  desc 'Forge module cache ttl in days'
  flag [:ttl], :default_value => 7, :type => Integer

  desc 'List of metrics to omit'
  flag [:blacklist, :b], :type => Array

  desc 'Any number or string used to generate the randomized site ID.'
  flag [:seed]

  pre do |global, command, options, args|
    Dropsonde.settings = global
    Dropsonde::Cache.init(global[:cachepath], global[:ttl], global[:update])
  end

  desc 'Manually update the Forge module name cache'
  command :update do |c|
    c.action do |global, options, args|
      Dropsonde::Cache.update
    end
  end

  desc 'Generate a complete schema set'
  command :schema do |c|
    c.action do |global, options, args|
      Dropsonde.generate_schema
    end
  end

  desc 'List all available metrics'
  command :list do |c|
    c.action do |global, options, args|
      Dropsonde.list_metrics
    end
  end

  desc 'Generate an example telemetry report'
  command :preview do |c|
    c.desc 'The output format to use'
    c.flag [:format], :default_value => 'human'

    c.action do |global, options, args|
      Dropsonde::Cache.autoupdate
      Dropsonde.generate_report(options[:format])
    end
  end

  desc 'Submit a telemetry report'
  command :submit do |c|
    c.desc 'Telemetry endpoint'
    c.flag [:endpoint], :default_value => 'https://prod.dujour.k8s.puppet.net'

    c.desc 'Telemetry port'
    c.flag [:port], :default_value => 443, :type => Integer

    c.action do |global, options, args|
      Dropsonde::Cache.autoupdate
      Dropsonde.submit_report(options[:endpoint], options[:port])
    end
  end
end

exit Dropsonde.run(ARGV)
